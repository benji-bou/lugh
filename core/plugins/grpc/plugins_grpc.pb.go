// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IOWorkerPluginsClient is the client API for IOWorkerPlugins service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IOWorkerPluginsClient interface {
	GetInputSchema(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*InputSchema, error)
	Config(ctx context.Context, in *RunInputConfig, opts ...grpc.CallOption) (*Empty, error)
	Input(ctx context.Context, opts ...grpc.CallOption) (IOWorkerPlugins_InputClient, error)
	Output(ctx context.Context, in *Empty, opts ...grpc.CallOption) (IOWorkerPlugins_OutputClient, error)
	Run(ctx context.Context, in *Empty, opts ...grpc.CallOption) (IOWorkerPlugins_RunClient, error)
}

type iOWorkerPluginsClient struct {
	cc grpc.ClientConnInterface
}

func NewIOWorkerPluginsClient(cc grpc.ClientConnInterface) IOWorkerPluginsClient {
	return &iOWorkerPluginsClient{cc}
}

func (c *iOWorkerPluginsClient) GetInputSchema(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*InputSchema, error) {
	out := new(InputSchema)
	err := c.cc.Invoke(ctx, "/grpc.IOWorkerPlugins/GetInputSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iOWorkerPluginsClient) Config(ctx context.Context, in *RunInputConfig, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/grpc.IOWorkerPlugins/Config", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iOWorkerPluginsClient) Input(ctx context.Context, opts ...grpc.CallOption) (IOWorkerPlugins_InputClient, error) {
	stream, err := c.cc.NewStream(ctx, &IOWorkerPlugins_ServiceDesc.Streams[0], "/grpc.IOWorkerPlugins/Input", opts...)
	if err != nil {
		return nil, err
	}
	x := &iOWorkerPluginsInputClient{stream}
	return x, nil
}

type IOWorkerPlugins_InputClient interface {
	Send(*DataStream) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type iOWorkerPluginsInputClient struct {
	grpc.ClientStream
}

func (x *iOWorkerPluginsInputClient) Send(m *DataStream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *iOWorkerPluginsInputClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iOWorkerPluginsClient) Output(ctx context.Context, in *Empty, opts ...grpc.CallOption) (IOWorkerPlugins_OutputClient, error) {
	stream, err := c.cc.NewStream(ctx, &IOWorkerPlugins_ServiceDesc.Streams[1], "/grpc.IOWorkerPlugins/Output", opts...)
	if err != nil {
		return nil, err
	}
	x := &iOWorkerPluginsOutputClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IOWorkerPlugins_OutputClient interface {
	Recv() (*DataStream, error)
	grpc.ClientStream
}

type iOWorkerPluginsOutputClient struct {
	grpc.ClientStream
}

func (x *iOWorkerPluginsOutputClient) Recv() (*DataStream, error) {
	m := new(DataStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iOWorkerPluginsClient) Run(ctx context.Context, in *Empty, opts ...grpc.CallOption) (IOWorkerPlugins_RunClient, error) {
	stream, err := c.cc.NewStream(ctx, &IOWorkerPlugins_ServiceDesc.Streams[2], "/grpc.IOWorkerPlugins/Run", opts...)
	if err != nil {
		return nil, err
	}
	x := &iOWorkerPluginsRunClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IOWorkerPlugins_RunClient interface {
	Recv() (*Error, error)
	grpc.ClientStream
}

type iOWorkerPluginsRunClient struct {
	grpc.ClientStream
}

func (x *iOWorkerPluginsRunClient) Recv() (*Error, error) {
	m := new(Error)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IOWorkerPluginsServer is the server API for IOWorkerPlugins service.
// All implementations must embed UnimplementedIOWorkerPluginsServer
// for forward compatibility
type IOWorkerPluginsServer interface {
	GetInputSchema(context.Context, *Empty) (*InputSchema, error)
	Config(context.Context, *RunInputConfig) (*Empty, error)
	Input(IOWorkerPlugins_InputServer) error
	Output(*Empty, IOWorkerPlugins_OutputServer) error
	Run(*Empty, IOWorkerPlugins_RunServer) error
	mustEmbedUnimplementedIOWorkerPluginsServer()
}

// UnimplementedIOWorkerPluginsServer must be embedded to have forward compatible implementations.
type UnimplementedIOWorkerPluginsServer struct {
}

func (UnimplementedIOWorkerPluginsServer) GetInputSchema(context.Context, *Empty) (*InputSchema, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInputSchema not implemented")
}
func (UnimplementedIOWorkerPluginsServer) Config(context.Context, *RunInputConfig) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Config not implemented")
}
func (UnimplementedIOWorkerPluginsServer) Input(IOWorkerPlugins_InputServer) error {
	return status.Errorf(codes.Unimplemented, "method Input not implemented")
}
func (UnimplementedIOWorkerPluginsServer) Output(*Empty, IOWorkerPlugins_OutputServer) error {
	return status.Errorf(codes.Unimplemented, "method Output not implemented")
}
func (UnimplementedIOWorkerPluginsServer) Run(*Empty, IOWorkerPlugins_RunServer) error {
	return status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedIOWorkerPluginsServer) mustEmbedUnimplementedIOWorkerPluginsServer() {}

// UnsafeIOWorkerPluginsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IOWorkerPluginsServer will
// result in compilation errors.
type UnsafeIOWorkerPluginsServer interface {
	mustEmbedUnimplementedIOWorkerPluginsServer()
}

func RegisterIOWorkerPluginsServer(s grpc.ServiceRegistrar, srv IOWorkerPluginsServer) {
	s.RegisterService(&IOWorkerPlugins_ServiceDesc, srv)
}

func _IOWorkerPlugins_GetInputSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IOWorkerPluginsServer).GetInputSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.IOWorkerPlugins/GetInputSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IOWorkerPluginsServer).GetInputSchema(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IOWorkerPlugins_Config_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunInputConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IOWorkerPluginsServer).Config(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.IOWorkerPlugins/Config",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IOWorkerPluginsServer).Config(ctx, req.(*RunInputConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _IOWorkerPlugins_Input_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IOWorkerPluginsServer).Input(&iOWorkerPluginsInputServer{stream})
}

type IOWorkerPlugins_InputServer interface {
	SendAndClose(*Empty) error
	Recv() (*DataStream, error)
	grpc.ServerStream
}

type iOWorkerPluginsInputServer struct {
	grpc.ServerStream
}

func (x *iOWorkerPluginsInputServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *iOWorkerPluginsInputServer) Recv() (*DataStream, error) {
	m := new(DataStream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _IOWorkerPlugins_Output_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IOWorkerPluginsServer).Output(m, &iOWorkerPluginsOutputServer{stream})
}

type IOWorkerPlugins_OutputServer interface {
	Send(*DataStream) error
	grpc.ServerStream
}

type iOWorkerPluginsOutputServer struct {
	grpc.ServerStream
}

func (x *iOWorkerPluginsOutputServer) Send(m *DataStream) error {
	return x.ServerStream.SendMsg(m)
}

func _IOWorkerPlugins_Run_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IOWorkerPluginsServer).Run(m, &iOWorkerPluginsRunServer{stream})
}

type IOWorkerPlugins_RunServer interface {
	Send(*Error) error
	grpc.ServerStream
}

type iOWorkerPluginsRunServer struct {
	grpc.ServerStream
}

func (x *iOWorkerPluginsRunServer) Send(m *Error) error {
	return x.ServerStream.SendMsg(m)
}

// IOWorkerPlugins_ServiceDesc is the grpc.ServiceDesc for IOWorkerPlugins service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IOWorkerPlugins_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.IOWorkerPlugins",
	HandlerType: (*IOWorkerPluginsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInputSchema",
			Handler:    _IOWorkerPlugins_GetInputSchema_Handler,
		},
		{
			MethodName: "Config",
			Handler:    _IOWorkerPlugins_Config_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Input",
			Handler:       _IOWorkerPlugins_Input_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Output",
			Handler:       _IOWorkerPlugins_Output_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Run",
			Handler:       _IOWorkerPlugins_Run_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "core/plugins/grpc/plugins.proto",
}
