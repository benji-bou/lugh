// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: core/plugins/grpc/plugins.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IOWorkerPlugins_GetInputSchema_FullMethodName = "/grpc.IOWorkerPlugins/GetInputSchema"
	IOWorkerPlugins_Config_FullMethodName         = "/grpc.IOWorkerPlugins/Config"
	IOWorkerPlugins_Input_FullMethodName          = "/grpc.IOWorkerPlugins/Input"
	IOWorkerPlugins_Output_FullMethodName         = "/grpc.IOWorkerPlugins/Output"
	IOWorkerPlugins_Run_FullMethodName            = "/grpc.IOWorkerPlugins/Run"
)

// IOWorkerPluginsClient is the client API for IOWorkerPlugins service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IOWorkerPluginsClient interface {
	GetInputSchema(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*InputSchema, error)
	Config(ctx context.Context, in *RunInputConfig, opts ...grpc.CallOption) (*Empty, error)
	Input(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[DataStream, Empty], error)
	Output(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DataStream], error)
	Run(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Error], error)
}

type iOWorkerPluginsClient struct {
	cc grpc.ClientConnInterface
}

func NewIOWorkerPluginsClient(cc grpc.ClientConnInterface) IOWorkerPluginsClient {
	return &iOWorkerPluginsClient{cc}
}

func (c *iOWorkerPluginsClient) GetInputSchema(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*InputSchema, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InputSchema)
	err := c.cc.Invoke(ctx, IOWorkerPlugins_GetInputSchema_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iOWorkerPluginsClient) Config(ctx context.Context, in *RunInputConfig, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, IOWorkerPlugins_Config_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iOWorkerPluginsClient) Input(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[DataStream, Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &IOWorkerPlugins_ServiceDesc.Streams[0], IOWorkerPlugins_Input_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DataStream, Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IOWorkerPlugins_InputClient = grpc.ClientStreamingClient[DataStream, Empty]

func (c *iOWorkerPluginsClient) Output(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DataStream], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &IOWorkerPlugins_ServiceDesc.Streams[1], IOWorkerPlugins_Output_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, DataStream]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IOWorkerPlugins_OutputClient = grpc.ServerStreamingClient[DataStream]

func (c *iOWorkerPluginsClient) Run(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Error], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &IOWorkerPlugins_ServiceDesc.Streams[2], IOWorkerPlugins_Run_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, Error]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IOWorkerPlugins_RunClient = grpc.ServerStreamingClient[Error]

// IOWorkerPluginsServer is the server API for IOWorkerPlugins service.
// All implementations must embed UnimplementedIOWorkerPluginsServer
// for forward compatibility.
type IOWorkerPluginsServer interface {
	GetInputSchema(context.Context, *Empty) (*InputSchema, error)
	Config(context.Context, *RunInputConfig) (*Empty, error)
	Input(grpc.ClientStreamingServer[DataStream, Empty]) error
	Output(*Empty, grpc.ServerStreamingServer[DataStream]) error
	Run(*Empty, grpc.ServerStreamingServer[Error]) error
	mustEmbedUnimplementedIOWorkerPluginsServer()
}

// UnimplementedIOWorkerPluginsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIOWorkerPluginsServer struct{}

func (UnimplementedIOWorkerPluginsServer) GetInputSchema(context.Context, *Empty) (*InputSchema, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInputSchema not implemented")
}
func (UnimplementedIOWorkerPluginsServer) Config(context.Context, *RunInputConfig) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Config not implemented")
}
func (UnimplementedIOWorkerPluginsServer) Input(grpc.ClientStreamingServer[DataStream, Empty]) error {
	return status.Errorf(codes.Unimplemented, "method Input not implemented")
}
func (UnimplementedIOWorkerPluginsServer) Output(*Empty, grpc.ServerStreamingServer[DataStream]) error {
	return status.Errorf(codes.Unimplemented, "method Output not implemented")
}
func (UnimplementedIOWorkerPluginsServer) Run(*Empty, grpc.ServerStreamingServer[Error]) error {
	return status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedIOWorkerPluginsServer) mustEmbedUnimplementedIOWorkerPluginsServer() {}
func (UnimplementedIOWorkerPluginsServer) testEmbeddedByValue()                         {}

// UnsafeIOWorkerPluginsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IOWorkerPluginsServer will
// result in compilation errors.
type UnsafeIOWorkerPluginsServer interface {
	mustEmbedUnimplementedIOWorkerPluginsServer()
}

func RegisterIOWorkerPluginsServer(s grpc.ServiceRegistrar, srv IOWorkerPluginsServer) {
	// If the following call pancis, it indicates UnimplementedIOWorkerPluginsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IOWorkerPlugins_ServiceDesc, srv)
}

func _IOWorkerPlugins_GetInputSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IOWorkerPluginsServer).GetInputSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IOWorkerPlugins_GetInputSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IOWorkerPluginsServer).GetInputSchema(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IOWorkerPlugins_Config_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunInputConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IOWorkerPluginsServer).Config(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IOWorkerPlugins_Config_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IOWorkerPluginsServer).Config(ctx, req.(*RunInputConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _IOWorkerPlugins_Input_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IOWorkerPluginsServer).Input(&grpc.GenericServerStream[DataStream, Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IOWorkerPlugins_InputServer = grpc.ClientStreamingServer[DataStream, Empty]

func _IOWorkerPlugins_Output_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IOWorkerPluginsServer).Output(m, &grpc.GenericServerStream[Empty, DataStream]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IOWorkerPlugins_OutputServer = grpc.ServerStreamingServer[DataStream]

func _IOWorkerPlugins_Run_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IOWorkerPluginsServer).Run(m, &grpc.GenericServerStream[Empty, Error]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IOWorkerPlugins_RunServer = grpc.ServerStreamingServer[Error]

// IOWorkerPlugins_ServiceDesc is the grpc.ServiceDesc for IOWorkerPlugins service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IOWorkerPlugins_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.IOWorkerPlugins",
	HandlerType: (*IOWorkerPluginsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInputSchema",
			Handler:    _IOWorkerPlugins_GetInputSchema_Handler,
		},
		{
			MethodName: "Config",
			Handler:    _IOWorkerPlugins_Config_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Input",
			Handler:       _IOWorkerPlugins_Input_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Output",
			Handler:       _IOWorkerPlugins_Output_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Run",
			Handler:       _IOWorkerPlugins_Run_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "core/plugins/grpc/plugins.proto",
}
